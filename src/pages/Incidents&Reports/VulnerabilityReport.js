import React from "react";
import { Row, Button, Col, Container, CardBody, Card, CardTitle, Form, Input, Label, FormFeedback } from "reactstrap";
// Formik validation
import * as Yup from "yup";
import { useFormik } from "formik";

const VulnerabilityReport = () => {

  const validation = useFormik({
    // enableReinitialize : use this flag when initial values needs to be changed
    // enableReinitialize: true,

    initialValues: {
      incidentDescription: '',
      ipAddress: '',
      sourceIpAddress: '',
      category: '',
    },
    validationSchema: Yup.object({
      incidentDescription: Yup.string().required("Please Enter Your Incident Description"),
      ipAddress: Yup.string().required("Please Enter Target Address"),
      sourceIpAddress: Yup.string().required("Please Enter Source IP Address"),
      category: Yup.string().required("Please Select Category"),
    }),
    onSubmit: (values) => {
    }
  });
  return (
    <React.Fragment>
      <div className="page-content">
        <Container fluid={true}>
        <Row className="justify-content-center">
            <Col xl={8}>
              <Card>
                <CardBody>
                  <CardTitle className="mb-4">Report a Vulnerability</CardTitle>
                  <Form onSubmit={validation.handleSubmit}>                 
                    <Row className="mb-4">
                    <Col sm={12}>
                      <Label for="horizontal-name-Input">
                        Name
                      </Label>
                        <Input
                          type="text"
                          className="form-control"
                          id="horizontal-name-Input"
                          placeholder="Enter Your Name"
                        />
                      </Col>
                    </Row>
                    <Row className="mb-4">
                    <Col sm={12}>
                      <Label for="horizontal-email-Input">
                        Email
                      </Label>
                        <Input
                          type="email"
                          className="form-control"
                          id="horizontal-email-Input"
                          placeholder="Enter Your Email"
                        />
                      </Col>
                    </Row>
                    <Row className="mb-4">
                    <Col sm={12}>

                      <Label for="horizontal-phoneNumber-Input">
                        Phone Number
                      </Label>
                        <Input
                          type="tel"
                          autoComplete="off"
                          className="form-control"
                          id="horizontal-phoneNumber-Input"
                          placeholder="Enter Your Phone Number"
                        />
                      </Col>
                    </Row>

                    <Row className="mb-4">
                    <Col sm={12}>

                      <Label for="horizontal-organization-Input">
                        Organization Name
                      </Label>
                        <Input
                          type="text"
                          className="form-control"
                          id="horizontal-organization-Input"
                          placeholder="Enter Your Organization Name"
                        />
                      </Col>
                    </Row>

                    <Row className="mb-4">
                    <Col sm={12}>

                      <Label for="category">
                        Category
                      </Label>
                      <Input
                          type="select"
                          className="form-control mb-2"
                          id="horizontal-category-Input"
                          onChange={validation.handleChange}
                          onBlur={validation.handleBlur}
                          value={validation.values.category}
                          invalid={validation.touched.category && !!validation.errors.category}
                        >                          
                         <option value="0">Identity Theft</option>
                          <option value="1">Intrusion</option>
                          <option value="2">Malicious Code Outbreak</option>
                          <option value="3">Malware Threat</option>
                          <option value="4">Phishing</option>
                          <option value="5">Request for Forensics</option>
                          <option value="6">Information Security</option>
                          <option value="7">Spam</option>
                          <option value="8">Suspicious Traffic</option>
                          <option value="9">Web Defacement</option>
                          <option value="10">Other</option>
                        </Input>
                        {validation.touched.category && validation.errors.category && (
                          <FormFeedback type="invalid">{validation.errors.category}</FormFeedback>
                        )}
                      </Col>
                    </Row>

                    <Row className="mb-4">
                    <Col sm={12}>

                      <Label for="incidentDescription">
                        Incident Description
                      </Label>
                        <Input
                          type="textarea"
                          id="incidentDescription"
                          placeholder="General Description (Dates, Noticed Signs of attack, Methods of Attack, Target of Attack, Estimated Loss or Damage, Measures Taken, Expectations from CAK...etc)"
                          onChange={validation.handleChange}
                          onBlur={validation.handleBlur}
                          value={validation.values.incidentDescription}
                          invalid={validation.touched.incidentDescription && !!validation.errors.incidentDescription}
                        />
                        {validation.errors.incidentDescription && validation.touched.incidentDescription && (
                          <FormFeedback type="invalid">{validation.errors.incidentDescription}</FormFeedback>
                        )}                      
                        </Col>
                    </Row>

                    <Row className="mb-4">
                    <Col sm={12}>
                        <Label for="targetOfAttack">
                            Target of the Attack
                        </Label>
                            <Input
                            type="text"
                            autoComplete="off"
                            className="form-control mb-2"
                            id="horizontal-ipAddress-Input"
                            placeholder="IP Address"
                            onChange={validation.handleChange}
                            onBlur={validation.handleBlur}
                            value={validation.values.ipAddress}
                            invalid={validation.touched.ipAddress && !!validation.errors.ipAddress}
                          />
                          {validation.errors.ipAddress && validation.touched.ipAddress && (
                            <FormFeedback type="invalid">{validation.errors.ipAddress}</FormFeedback>
                          )}                            
                          <Input
                            type="text"
                            autoComplete="off"
                            className="form-control mb-2"
                            id="horizontal-dns-Input"
                            placeholder="DNS Name"
                            />
                            <Input
                            type="text"
                            autoComplete="off"
                            className="form-control mb-2"
                            id="horizontal-port-Input"
                            placeholder="TCP/UDP Port"
                            />
                        </Col>
                        </Row>

                        <Row className="mb-4">
                        <Col sm={12}>

                        <Label for="sourceOfAttack" className="col-sm-3 col-form-label">
                            Source of the Attack
                        </Label>
                            <Input
                            type="text"
                            autoComplete="off"
                            className="form-control mb-2"
                            id="horizontal-source-ipAddress-Input"
                            placeholder="IP Address"
                            onChange={validation.handleChange}
                            onBlur={validation.handleBlur}
                            value={validation.values.sourceIpAddress}
                            invalid={validation.touched.sourceIpAddress && !!validation.errors.sourceIpAddress}
                          />
                          {validation.errors.sourceIpAddress && validation.touched.sourceIpAddress && (
                            <FormFeedback type="invalid">{validation.errors.sourceIpAddress}</FormFeedback>
                          )}                            
                          <Input
                            type="text"
                            autoComplete="off"
                            className="form-control mb-2"
                            id="horizontal-source-dns-Input"
                            placeholder="DNS Name"
                            />
                            <Input
                            type="text"
                            autoComplete="off"
                            className="form-control mb-2"
                            id="horizontal-source-port-Input"
                            placeholder="TCP/UDP Port"
                            />
                        </Col>
                        </Row>

                        <Row className="justify-content-center mb-4">
                        <Col sm={6}>
                            <Button type="submit" color="primary" block>
                            Submit
                            </Button>
                        </Col>
                        </Row>
                  </Form>
                </CardBody>
              </Card>
            </Col>
          </Row>
        </Container>
      </div>
    </React.Fragment>
  );
};

export default VulnerabilityReport;
